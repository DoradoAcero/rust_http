use std::fmt::format;

use rand::Error;

use crate::response_codes::ResponseCode;

pub const HTTP_VERSION: &str = "HTTP/l.l";

#[derive(Debug, PartialEq)]
pub enum HttpMethod {
    Get,
    Post,
    Put,
    Delete,
}

#[derive(PartialEq)]
pub struct HttpHeader {
    key: String,
    value: String,
}

#[derive(PartialEq)]
pub struct HttpRequest {
    pub method: HttpMethod,
    pub endpoint: String,
    pub headers: Vec<HttpHeader>,
    pub body: String,
}

pub struct HttpResponse {
    pub status_code: ResponseCode,
    pub headers: Vec<HttpHeader>,
    pub body: String,
}

impl HttpResponse {
    pub fn to_string(&self) -> String {
        let mut response_string = format!("{} {:.?} {}\n", HTTP_VERSION, self.status_code, self.status_code.value());
        for header in &self.headers {
            response_string.push_str(&format!("{}: {}\n", header.key, header.value));
        }
        response_string.push_str("\n");
        response_string.push_str(&self.body);
        response_string
    }

    pub fn from_string(req_string: String) -> Result<HttpResponse, Error> {
        let mut lines = req_string.lines();

        // handle all these unwraps better, I should wrap this in results and whatnot
        let mut first_line_options = lines.next().unwrap().split_whitespace();
        let version = first_line_options.next().unwrap();
        let status_code = first_line_options.next().unwrap();
        let status_response = first_line_options.next().unwrap();
        assert!(version == HTTP_VERSION, "Must be my http version");

        let mut line = lines.next().unwrap();
        let mut headers = vec![];
        while !(line == "") {
            let mut line_split = line.split(": ");
            let key = line_split.next().unwrap();
            let value = line_split.next().unwrap();

            headers.push(HttpHeader {
                key: key.to_string(),
                value: value.to_string(),
            });
            line = lines.next().unwrap();
        };

        let mut body = "".to_string();
        while let Some(line) = lines.next() {
            body.push_str(line);
        }

        Ok(HttpRequest { method, endpoint: endpoint.to_string(), headers, body })
    }
}